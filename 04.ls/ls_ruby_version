#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'etc'

# 最大列数を定める(今回は3)
MAX_VARIABLE_COLUMNS = 3

# ファイルモードで取得される値のうち権限を示す数字は末尾3桁。
PERMISSION_NUMBER = -3

PERMISSION_NUMBERS_TO_SYMBOLS = {
  0 => '---',
  1 => '--x',
  2 => '-w-',
  3 => '-wx',
  4 => 'r--',
  5 => 'r-x',
  6 => 'rw-',
  7 => 'rwx'
}.freeze

def change_numbers_to_symbols(number)
  permission_numbers = number.to_s(8)[PERMISSION_NUMBER..]
  permission_symbols = permission_numbers.chars.map(&:to_i)
  permission_symbols.map { |permission_number| PERMISSION_NUMBERS_TO_SYMBOLS[permission_number] }.join
end

def calculate_total_blocks(file_names)
  file_names.sum { |file_name| File::Stat.new(file_name).blocks }
end

def output_long_contents(file_names)
  file_stats = file_names.map { |file| File::Stat.new(file) }
  nlink_max_length = file_stats.map { |file_stat| file_stat.nlink.to_s.length }.max
  owner_name_max_length = file_stats.map { |file_stat| Etc.getpwuid(file_stat.uid)[0].length }.max
  group_name_max_length = file_stats.map { |file_stat| Etc.getgrgid(file_stat.gid)[0].length }.max
  file_size_max_length = file_stats.map { |file_stat| file_stat.size.to_s.length }.max

  file_names.each_with_index do |file, index|
    file_stat = File::Stat.new(file)
    permission_symbols = change_numbers_to_symbols(file_stat.mode)
    owner_name = Etc.getpwuid(file_stat.uid)[0]
    group_name = Etc.getgrgid(file_stat.gid)[0]
    file_size = file_stat.size
    formatted_date = file_stat.ctime.strftime('%_m %e %H:%M')
    file_type_default = file_stat.ftype[0]
    file_type = file_type_default == 'f' ? '-' : file_stat.ftype[0]
    output_line = "#{file_type}#{permission_symbols} " \
                  "#{file_stat.nlink.to_s.rjust(nlink_max_length)} #{owner_name.rjust(owner_name_max_length)} " \
                  "#{group_name.rjust(group_name_max_length)} #{file_size.to_s.rjust(file_size_max_length)} " \
                  "#{formatted_date} #{file_names[index]}"
    puts output_line
  end
end

def list_directory_contents(file_names)
  # 出力時の行数を定める(切り上げ)
  number_of_row = (file_names.size.to_f / MAX_VARIABLE_COLUMNS).ceil

  # 余ってしまう行(余白)に対し要素(nil)を補充し整形に必要な配列を用意
  list_filled_with_blanks = file_names + Array.new(number_of_row * MAX_VARIABLE_COLUMNS - file_names.size, nil)

  # 最大列数にあわせて配列を分割する
  separated_directory_contents = list_filled_with_blanks.each_slice(number_of_row).to_a

  # 最も長いファイル名(文字列)の長さを列幅の基準にする
  max_filename_length = file_names.map(&:length).max

  # 横に展開したときに縦に意図した並び(昇順)が実現できるように配列を変更する。
  separated_directory_contents.transpose.map do |contents_of_row|
    contents_of_row.map { |filename| filename.to_s.ljust(max_filename_length) }.join("\t")
  end
end

def run
  options = {}
  OptionParser.new do |opts|
    opts.on('-a', /a/) do
      options[:all] = true
    end

    opts.on('-l', /l/) do
      options[:long] = true
    end

    opts.on('-r', /r/) do
      options[:reverse] = true
    end
  end.parse!

  file_names = options[:all] ? Dir.glob('*', File::FNM_DOTMATCH) : Dir.glob('*')

  file_names = file_names.reverse if options[:reverse]

  if options[:long]
    puts "total #{calculate_total_blocks(file_names)}"
    output_long_contents(file_names)
  else
    puts list_directory_contents(file_names)
  end
end

run
